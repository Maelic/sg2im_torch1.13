<<<<<<< HEAD
Namespace(dataset='vg', batch_size=32, num_iterations=1000000, learning_rate=0.0001, eval_mode_after=100000, image_size=(128, 128), num_train_samples=None, num_val_samples=1024, shuffle_val=True, loader_num_workers=4, include_relationships=True, vg_image_dir='/home/maelic/Documents/PhD/Datasets/VisualGenome', train_h5='datasets/vg150/train.h5', val_h5='datasets/vg150/val.h5', vocab_json='datasets/vg150/vocab.json', max_objects_per_image=30, vg_use_orphaned_objects=True, coco_train_image_dir='datasets/coco/images/train2017', coco_val_image_dir='datasets/coco/images/val2017', coco_train_instances_json='datasets/coco/annotations/instances_train2017.json', coco_train_stuff_json='datasets/coco/annotations/stuff_train2017.json', coco_val_instances_json='datasets/coco/annotations/instances_val2017.json', coco_val_stuff_json='datasets/coco/annotations/stuff_val2017.json', instance_whitelist=None, stuff_whitelist=None, coco_include_other=False, min_object_size=0.02, min_objects_per_image=3, coco_stuff_only=True, mask_size=16, embedding_dim=128, gconv_dim=128, gconv_hidden_dim=512, gconv_num_layers=5, mlp_normalization='none', refinement_network_dims=(1024, 512, 256, 128, 64), normalization='batch', activation='leakyrelu-0.2', layout_noise_dim=32, use_boxes_pred_after=-1, mask_loss_weight=0, l1_pixel_loss_weight=1.0, bbox_pred_loss_weight=10, predicate_pred_loss_weight=0, discriminator_loss_weight=0.01, gan_loss_type='gan', d_clip=None, d_normalization='batch', d_padding='valid', d_activation='leakyrelu-0.2', d_obj_arch='C4-64-2,C4-128-2,C4-256-2', crop_size=32, d_obj_weight=1.0, ac_loss_weight=0.1, d_img_arch='C4-64-2,C4-128-2,C4-256-2', d_img_weight=1.0, print_every=10000, timing=False, checkpoint_every=20000, output_dir='./checkpoints', checkpoint_name='checkpoint', checkpoint_start_from=None, restore_from_checkpoint=False)
There are 1842 iterations per epoch
Sg2ImModel(
  (obj_embeddings): Embedding(152, 128)
  (pred_embeddings): Embedding(51, 128)
=======
Namespace(ac_loss_weight=0.1, activation='leakyrelu-0.2', batch_size=16, bbox_pred_loss_weight=10, checkpoint_every=20000, checkpoint_name='checkpoint', checkpoint_start_from=None, coco_include_other=False, coco_stuff_only=True, coco_train_image_dir='datasets/coco/images/train2017', coco_train_instances_json='datasets/coco/annotations/instances_train2017.json', coco_train_stuff_json='datasets/coco/annotations/stuff_train2017.json', coco_val_image_dir='datasets/coco/images/val2017', coco_val_instances_json='datasets/coco/annotations/instances_val2017.json', coco_val_stuff_json='datasets/coco/annotations/stuff_val2017.json', crop_size=32, d_activation='leakyrelu-0.2', d_clip=None, d_img_arch='C4-64-2,C4-128-2,C4-256-2', d_img_weight=1.0, d_normalization='batch', d_obj_arch='C4-64-2,C4-128-2,C4-256-2', d_obj_weight=1.0, d_padding='valid', dataset='vg', discriminator_loss_weight=0.01, embedding_dim=128, eval_mode_after=100000, gan_loss_type='gan', gconv_dim=128, gconv_hidden_dim=512, gconv_num_layers=5, image_size=(256, 256), include_relationships=True, instance_whitelist=None, l1_pixel_loss_weight=1.0, layout_noise_dim=32, learning_rate=0.0001, loader_num_workers=4, mask_loss_weight=0, mask_size=16, max_objects_per_image=10, min_object_size=0.02, min_objects_per_image=3, mlp_normalization='none', normalization='batch', num_iterations=500000, num_train_samples=None, num_val_samples=1024, output_dir='./checkpoints', predicate_pred_loss_weight=0, print_every=10000, refinement_network_dims=(1024, 512, 256, 128, 64), restore_from_checkpoint=False, shuffle_val=True, stuff_whitelist=None, timing=False, train_h5='datasets/vg_curated/train.h5', use_boxes_pred_after=-1, val_h5='datasets/vg_curated/val.h5', vg_image_dir='/home/maelic/Documents/PhD/Datasets/VisualGenome/VG_100K', vg_use_orphaned_objects=True, vocab_json='datasets/vg_curated/vocab.json')
There are 3726 iterations per epoch
Sg2ImModel(
  (obj_embeddings): Embedding(150, 128)
  (pred_embeddings): Embedding(50, 128)
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
  (gconv): GraphTripleConv(
    (net1): Sequential(
      (0): Linear(in_features=384, out_features=512, bias=True)
      (1): ReLU()
      (2): Linear(in_features=512, out_features=1152, bias=True)
      (3): ReLU()
    )
    (net2): Sequential(
      (0): Linear(in_features=512, out_features=512, bias=True)
      (1): ReLU()
      (2): Linear(in_features=512, out_features=128, bias=True)
      (3): ReLU()
    )
  )
  (gconv_net): GraphTripleConvNet(
    (gconvs): ModuleList(
<<<<<<< HEAD
      (0-3): 4 x GraphTripleConv(
=======
      (0): GraphTripleConv(
        (net1): Sequential(
          (0): Linear(in_features=384, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=1152, bias=True)
          (3): ReLU()
        )
        (net2): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=128, bias=True)
          (3): ReLU()
        )
      )
      (1): GraphTripleConv(
        (net1): Sequential(
          (0): Linear(in_features=384, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=1152, bias=True)
          (3): ReLU()
        )
        (net2): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=128, bias=True)
          (3): ReLU()
        )
      )
      (2): GraphTripleConv(
        (net1): Sequential(
          (0): Linear(in_features=384, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=1152, bias=True)
          (3): ReLU()
        )
        (net2): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=128, bias=True)
          (3): ReLU()
        )
      )
      (3): GraphTripleConv(
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
        (net1): Sequential(
          (0): Linear(in_features=384, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=1152, bias=True)
          (3): ReLU()
        )
        (net2): Sequential(
          (0): Linear(in_features=512, out_features=512, bias=True)
          (1): ReLU()
          (2): Linear(in_features=512, out_features=128, bias=True)
          (3): ReLU()
        )
      )
    )
  )
  (box_net): Sequential(
    (0): Linear(in_features=128, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=4, bias=True)
    (3): ReLU()
  )
  (mask_net): Sequential(
<<<<<<< HEAD
    (0): Upsample(scale_factor=2.0, mode='nearest')
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
    (4): Upsample(scale_factor=2.0, mode='nearest')
    (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU()
    (8): Upsample(scale_factor=2.0, mode='nearest')
    (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU()
    (12): Upsample(scale_factor=2.0, mode='nearest')
=======
    (0): Upsample(scale_factor=2.0, mode=nearest)
    (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
    (4): Upsample(scale_factor=2.0, mode=nearest)
    (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU()
    (8): Upsample(scale_factor=2.0, mode=nearest)
    (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU()
    (12): Upsample(scale_factor=2.0, mode=nearest)
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
    (13): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (14): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU()
    (16): Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))
  )
  (rel_aux_net): Sequential(
    (0): Linear(in_features=264, out_features=512, bias=True)
    (1): ReLU()
<<<<<<< HEAD
    (2): Linear(in_features=512, out_features=51, bias=True)
=======
    (2): Linear(in_features=512, out_features=50, bias=True)
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
    (3): ReLU()
  )
  (refinement_net): RefinementNetwork(
    (refinement_modules): ModuleList(
      (0): RefinementModule(
        (net): Sequential(
          (0): Conv2d(161, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.2)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.2)
        )
      )
      (1): RefinementModule(
        (net): Sequential(
          (0): Conv2d(1184, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.2)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.2)
        )
      )
      (2): RefinementModule(
        (net): Sequential(
          (0): Conv2d(672, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.2)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.2)
        )
      )
      (3): RefinementModule(
        (net): Sequential(
          (0): Conv2d(416, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.2)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.2)
        )
      )
      (4): RefinementModule(
        (net): Sequential(
          (0): Conv2d(288, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.2)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): LeakyReLU(negative_slope=0.2)
        )
      )
    )
    (output_conv): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2)
      (2): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2))
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
LeakyReLU(negative_slope=0.2)
Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
LeakyReLU(negative_slope=0.2)
Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2))
BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
LeakyReLU(negative_slope=0.2)
Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
LeakyReLU(negative_slope=0.2)
Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
AcCropDiscriminator(
  (discriminator): AcDiscriminator(
    (cnn): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.2)
        (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): LeakyReLU(negative_slope=0.2)
        (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
      )
      (1): GlobalAvgPool()
      (2): Linear(in_features=256, out_features=1024, bias=True)
    )
    (real_classifier): Linear(in_features=1024, out_features=1, bias=True)
<<<<<<< HEAD
    (obj_classifier): Linear(in_features=1024, out_features=151, bias=True)
=======
    (obj_classifier): Linear(in_features=1024, out_features=149, bias=True)
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
  )
)
PatchDiscriminator(
  (cnn): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): LeakyReLU(negative_slope=0.2)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
    (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): LeakyReLU(negative_slope=0.2)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
  )
  (classifier): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
)
<<<<<<< HEAD
*************************** TEST ****
Starting epoch 1
OBJS:  tensor([  7,  57,  74,  74,  78, 113, 125, 104, 143,   0,  12,  74, 127,  74,
         73,  73,  73,  73,  73,  45,  73,  73, 104,   0,  22,  22,  23, 115,
        115, 115, 115, 124,  22, 136, 115,  26, 136, 114, 115,  26,  26, 136,
          0,  66,  78,  91, 111, 115, 149,  78, 124,  78, 115,  88,  22,   0,
         25, 145,  79,  60,  78,  25,  60,  13,  60,  87,  66, 111,   0,  54,
         49,  50,  54,  97, 126,  97,  97,   0,  58,  75,  91,  91,  94,  97,
        111, 111, 126,  46,  58,   0,  49,  66,  87, 110, 110, 141, 141, 149,
          6, 110,   6,   0,  31,  55,  66,  66,  78, 119, 121, 149, 149,  57,
         62,  78, 136,  31,  60,   0, 103, 107,  78, 120, 111, 149, 102, 136,
        102,  61, 149,  98,   0,   8,  19,  53,  54,  57,  67, 111, 111, 149,
         19,  19,  38,  19,  46, 115,   0,  95, 127, 147, 147,  95,  69,  95,
          1,   0,  57,  67,  78,  78, 111, 111, 149, 126,  78, 149,   0,  44,
         58,  78,  66,  78,  99,  99, 112, 112, 136, 121, 121, 119, 121, 118,
         58, 121,  91, 118,   0,  22, 114,  99,  76, 115, 124,  53,   0,  21,
         21, 138,  61,  73,  74, 136,   0,   3,  87,  62,  78, 111, 117,  78,
        144,  78, 111,   0,  44,  45,  57,  58, 104, 111, 149,  59,   0,   3,
         17,  94,  58,  58,  78,  94, 126,  94,  88,  59, 111,  94,   0,  22,
        124,  26,  26,  26,  26, 136,  22,  26,  26,  26,  99,  99,   0,  10,
         19,  22,  58,  61,  74,  78,  87,  96, 112, 114, 145,  57,   0,   3,
         35,  53,  57,  58, 145,  48,  73,  44,   0,  66,  20,  82,  43,  43,
         51,  57,  68,  86,  82,  86,  84,   0,   7,  12,  61, 127,  74, 143,
         74, 147,   0,  77,  97,  97, 111, 126,  91,  28,  34,  18,  34,  58,
          0, 124, 114,  26, 137, 129,  99,  26,  22,  25,  99, 100,   0,  13,
         16,  55,  60,  60,  78,  91,  90,  31,  87,  16,  16,   3,  91,  31,
         16,   0,  33,  44,  74, 127,  74,  74,  74,  74,   0,  57,  58,  92,
        149, 111,  46,  40,  58,   0,  23, 144,  73, 136,  73, 146, 136, 144,
         22, 136,  23, 114,   0,  78,  50,  54,  78,  78, 111,  18,  78,  54,
         78, 126,  97,   0,  40,  41,  41,  43,  43, 138, 143,  61,  57,   0],
       device='cuda:0')
TRIPLES:  tensor([[  6,  20,   4],
        [  5,  48,   4],
        [  3,  20,   4],
        ...,
        [388,   0, 391],
        [389,   0, 391],
        [390,   0, 391]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
         3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,
         5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
         7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,
         9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
        13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
        15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26,
        26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
        30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31],
       device='cuda:0')
BOXES:  tensor([[0.4980, 0.7635, 1.4960, 1.2216],
        [0.4580, 0.3743, 0.5200, 0.4461],
        [0.4200, 0.7126, 0.4920, 0.9551],
        ...,
        [0.6500, 0.4804, 1.0920, 0.9677],
        [0.4620, 0.1316, 0.5600, 0.2379],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([  8,  74,  85,   0,  60,  78, 111, 113, 138, 120, 136,   0,  17,  25,
         78,  97, 149,  50,  94,   0,  49,  54,  78,  97, 145, 149,  57, 111,
         88,  97,  32,  60,  18,   3, 136, 149,   0,  49, 126,  97,   0,  86,
        115,  22, 145, 145, 115, 115,  99, 136,  78, 136,  21, 115, 124,   0,
         91,  17,  17,  37,  40,  61,  58,  84,  97,  91, 149, 149,  58,  43,
         82,   0,   5,  21,  21,  43,  44,  60,  73,  73,  78,  84, 111, 136,
         77,  58,  51,   0,  62,  61,  98,  87,  62,  87,  87,  78,  25, 112,
          3,  87, 111, 111,  87, 112,   0,  26,  37, 124,  61,  74,  74,  89,
         89, 127, 130, 144,  84, 127,  43,  37,  40,  74,   0,  41,  41, 127,
        127,   0,  25,  54,  58,  61,  67,  74,  78, 117, 115, 115,   3,  22,
        112, 145,  38, 120, 124, 111,   0,  25,  61,  61,  78,  78,  94,  97,
        126, 121, 103,  17,   0,  21,  23,  45, 114, 136, 136, 146, 115,  45,
         22, 105,  22,  45, 136, 142,  23, 136, 136,   0,  78,  87, 111,  98,
         60,  25,   0,  11,  26,  57,  65,  66,  76,  87, 105, 108, 145, 149,
         65,  48,   0,  26,  27,  59,  38, 108,  59,  59, 142,   0,  22,  30,
         47,  76,  99,  99, 100,  99,  76,  38,  76,  76,  78,  76,   0,  78,
        111, 149,  58,  44, 113,  73,  58,  57,  45,   0,  40,  43,  61,  74,
         82,  83, 150,   2, 104,   0,  28,  28,  35,  38,  92,  93,  93, 126,
        126, 126,  44,  71,   0,  11,  91, 111,  31, 136,  99,  22,  76,   0,
         22,  23,  23,  45,  90,  91,  99, 114, 115, 133, 136, 145, 111,  23,
         22, 149,   0,  72,  78,  82,  84,  97, 111, 126,  91,  72, 145,  46,
        107, 107,  18, 126,  18,  72,   0,   6,  32,  48,  54,  54,  54,  54,
         61,  61,  70,  78, 111, 111, 126, 145,  32, 110, 132,  78, 149, 111,
         91,  71,  71, 149,  76,   0,  17,  18,  28,  38,  49,  50,  54,  58,
         61,  97, 126, 149,  78,  90,  54,  49,  57,  91,  78,   0,  55,  58,
         58,  62,  78, 111, 117, 136, 124, 144, 112, 144,   0,  20,  54,  96,
          0,   1,  22,  22,  26,  26,  99, 115, 124, 136, 145, 148,  26,  73,
          0,  20,  60,  78,  78,  78,  87, 113, 113, 117, 117,  78,  78,  87,
        124,  13,  87,  29, 149,  78, 149,  91, 145, 124,   0,  19, 126,  18,
        140,  74, 140,  28,   0,  68,  22,  64,   0], device='cuda:0')
TRIPLES:  tensor([[  1,  20,   0],
        [  0,   0,   3],
        [  1,   0,   3],
        ...,
        [411,   0, 414],
        [412,   0, 414],
        [413,   0, 414]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,
         2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
         3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
         5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
         7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,
         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10,
        10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13,
        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14,
        14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20,
        20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
        25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
        26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
        28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31,
        31], device='cuda:0')
BOXES:  tensor([[0.6040, 0.4444, 0.8460, 0.7718],
        [0.6560, 0.5435, 0.7420, 0.6757],
        [0.5000, 0.4985, 0.6080, 0.6276],
        ...,
        [0.3980, 0.1406, 0.4980, 0.2626],
        [0.5960, 0.7003, 1.0700, 1.1751],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([  4,  41,  55,  57,  62,  66,  78, 111, 138, 149, 149, 115,  41,  55,
         41,  78, 124, 149,  91,  91,  91,  91,  11,  91, 115,  78,  78,  78,
        149,   0,  28,  97,  49,  50,  50,  54,  54,  83,  97, 126, 126, 149,
         97,  17,  54,  54,  78,  49,   0,  78, 117,  91,  74,  78,  78, 136,
          0,  13,  55,  60,  61,  78,  91, 125,  58, 121,  99, 121,  99,  66,
        136,  87,   0,  17, 141,  18, 126, 126,  17, 126,  97,  97,  17,  17,
         34, 126, 126,  49, 126, 126,   0,  78,  78,  87,  87, 111, 111,  55,
         78, 112,  78,  55, 112,  90,  87,  90,  97,   0,  54, 149,  57,  57,
         66, 149,  78, 111,  54, 149,  70,  61,  91,  31, 111,  78,   0,  78,
         48,  57,  78,  87, 102, 111, 112, 113, 123,  98,  91,  78,  48,  75,
        111,  48,  48,  48,   0,  35,  35,  48,  71,  96,  96, 126, 126, 145,
         28,  28,  28,  32,  39,  59,  39,  32,  39,  39, 145,   0,  40,  46,
         58,  78,  84,  57, 128,   3,   0,  32, 141,  51, 126,  18,  18,  18,
         18,   0,  30,  45,  99,  99, 114, 115, 101,  26, 136,  11,  26,  26,
         99,  26,  26,   0,  20,  77,  78, 111, 111, 117, 136, 144, 144,  20,
        111, 111, 117, 103,  91, 136, 112,  20,  87,  45,  91,  44,  45,  74,
        112, 136,  76,   0,  20,  57,  58, 111, 126,  77,  88,  24,   0,   3,
         17,  17,  54,  54,  57,  58,  61,  61,  77,  78,  82,  84, 110, 111,
        111,  54, 149,  17,  17,  17,  17,  65,  17,  17,  38,  44,  17,  17,
          0,   3,  28,  57,  58, 102, 149, 132,   0,  95,  84, 127, 147,  95,
        127,  95,   0,  13,  63,  75,  78,  87, 112, 121, 125,  44,  66,  62,
          0,  10,  78,  61,  74,  74,  78,  78,  91,  91,  90,  90,  90,  10,
         91,  91,  91,  57,  61,  90,  74,  61,  74,  61,   0,  30,  58, 115,
          0,  62,  99,  99, 115, 124, 137, 142, 144, 148,  80,  11,  78,  11,
         80,   0,  60,  62,  78,  80,  91,  91,  99, 111, 111, 114, 115, 124,
        136, 136, 144,  87,  22,  99,  78, 105,  31,  96,  11,   0,  32,  38,
         39,  59, 116, 116, 132, 132, 132, 129, 106,   0,  45,  48,  61,  64,
        127,  81,   0,  26,  99, 115, 115, 124,  66,  45,  61,   4, 136, 136,
         97, 115,   0,  63,  95,  99, 133, 148,   0,  95,  42,  42, 127,  95,
          0,  11,  62,  66,  78, 136,  73,   0, 115,  23,  23,  23, 115, 115,
        145, 145, 115,  85,  90,  23,  91,  90,   0,  22,  23,  26,  26,  75,
         99,  22, 124, 134, 137, 144, 145, 145, 130,  78,  99, 135, 134, 145,
        145,  26,   0, 136,  81,  65, 136, 136,  73,  14,  14,  22,  14,  14,
        139,  22, 136,   0, 131, 108, 116,  54, 145,  35,   0],
       device='cuda:0')
TRIPLES:  tensor([[ 11,  48,   1],
        [  1,  38,   9],
        [ 12,  30,   8],
        ...,
        [469,   0, 472],
        [470,   0, 472],
        [471,   0, 472]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,
         2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
         3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
         4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
         6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,
         7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13,
        13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
        15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
        21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23,
        23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
        25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27,
        28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29,
        29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31,
        31, 31, 31, 31, 31], device='cuda:0')
BOXES:  tensor([[0.7980, 0.8045, 0.9520, 1.0206],
        [0.3700, 0.6008, 0.9300, 1.2346],
        [0.4360, 0.2942, 0.4720, 0.3868],
        ...,
        [0.7160, 0.2667, 1.1040, 0.8000],
        [0.1820, 0.4960, 0.4760, 1.4907],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([134,  73,  73,  76,  85,  91,  91, 115, 135, 145, 145, 136,   0,  78,
        117,  17,  62,  99,   3, 111,  61,   0,  73,  73, 136, 136, 136,  33,
        136,   0, 115, 100, 115,  26,  76,  26,  76, 114,  99,  91,  76, 149,
        133,   0,   9,  75,  75,  93,  93,  93,  93, 145,   0,  40,  64,  82,
         64,  84,  60, 145,   0,  53,  53,  54,  55,  60, 111, 118,  66, 121,
         66,  60,  54, 136,  87,   0, 105,  65,  65, 105,  22, 136,  63,  65,
         65,  65, 136,  65, 136,  99,  65,  26,  14,  14,  22, 136,  65,   0,
         19,  22,  23,  99, 130, 145, 145, 145, 145, 145, 145, 145, 145, 145,
        145, 145, 145, 145, 145,  22, 145,  22,  99, 115, 115, 130, 124,   0,
         14,  17,  34,  54,  57,  66,  78,  78,  90,  91,  91,  22, 149, 149,
         14,  14,  14,  54,  32,  22,  99,  14,  14,   3,   0,  44,  44, 109,
        109,  74,  96, 109,   0,  97, 126,  59,  84,  60,   0,  37,  37,  40,
         61, 143,   7,   0, 145,  10,  12,  90, 114,  58,  60,  78,  78,  90,
        149, 111, 111,  90, 111,  58,  60,  10,  79,   0,  45,  63, 100, 109,
        109, 115, 109,  99,  61,  74,  74,   0,  91, 121,  91, 119,  81,  78,
         91, 136,   0,  88,  19, 129,  59,  38,  32, 129, 129,  55,  24, 129,
         49, 129,   0,  80,  78,  90, 108, 111, 124, 144,  78, 111,  62,  22,
        145, 115,  91,  38,  64,  64,  80, 149,  38,  22,  38, 149, 145,  38,
          0,  67,  78, 111,  76, 129,  19, 149,  59,   0,  12,  28,  90, 126,
         12, 139,  38,  90, 126,  54, 115, 139, 126,   0,  74,  78, 125, 143,
         96,   0,   8,  40,  44,  61, 104, 136,  73,   0,   3,  91, 115,  45,
         57,  61,  73,  74,  74, 102, 111, 136,  91, 113, 136,   0,  61,  74,
         74, 109, 127, 136,  31,   0,  18,  49,  49,  97,  97,  97,  97, 126,
          0,  99, 115, 115, 115, 115, 148,  99, 115,  99,  76, 136,  76,   0,
        138,  40,  41,  43,  44,  44,  74,  74, 127, 136, 138,  41,  40,  74,
        136,  74,  41,  74,  74, 136,  40,   0,  28,   9,  36,  29, 145,  29,
         71, 144,  13,  39,  29,   9, 145, 132,   0,  40,  43,  44,  52,  61,
         82,  83,  45,  52,  57, 136,  85,   0,  61,  64, 136,  64,  64,  64,
          0,  18,  49,  59, 101,  59,  49,   0,  40,  40,  61,  61,  84, 136,
        150, 150,  57,   0], device='cuda:0')
TRIPLES:  tensor([[  0,  31,   8],
        [  0,  31,   8],
        [  0,  29,   1],
        ...,
        [406,   0, 409],
        [407,   0, 409],
        [408,   0, 409]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,
         3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,
         5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
         6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
         9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11,
        11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14,
        14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16,
        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
        21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
        25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26,
        26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
        28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30,
        30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31],
       device='cuda:0')
BOXES:  tensor([[0.4954, 0.8020, 1.4863, 1.1860],
        [0.5684, 0.8400, 0.6657, 0.8880],
        [0.9119, 0.7360, 0.9726, 0.7760],
        ...,
        [0.2840, 0.5539, 0.8500, 1.4281],
        [0.5740, 0.3084, 0.6620, 0.4970],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([ 16,  31,  37,  78,  67,  74,  78, 108, 111, 112, 117, 149,  74,  54,
        112,   3,  87,  58, 112,  74,  13,   4, 108, 145,   0,  76,  78, 114,
        128,  44, 124,  66,  57, 137, 111,  22, 136,   0,   3,   3,  40,  44,
         57,  58,  72,  77,  96,  96, 111, 126, 149,  93,  46,   0,  37,  40,
         82,  89,  89,  84,  89,  89,   9,  93,  74,  93,  37,   0,  22, 105,
        142, 136,  90,   0,  92,  70,  57,   4, 111,  76,  66,  32, 132, 116,
         91,  30,  78,   0,  10,  22, 124,  99, 115, 136, 145, 145, 149, 100,
        144,  58,  74, 145, 108, 149, 115,  38, 149,  57, 144,   0,   7,  78,
         91,  91, 139, 149,  91, 149,  96,  78, 136,  22, 139,  99,  22,  78,
         79,   7,  22,  22,  91, 143,  14,   0,  94,  97,  18, 126,  18,   0,
         26,  26,  26,  26,  99, 115, 115, 121, 121, 124, 148, 148, 114, 136,
          0,  22,  22,  26,  26,  26,  26,  26,  30,  30, 124,  90, 114, 115,
        124, 133, 145, 145, 145, 145, 145, 136,  91,  91,  22,  76, 149,  78,
        105,   0,  10,  27,  40,  40,  43,  43,  44,  89, 127,   0, 121,  62,
         68, 119,  99,  68, 119,  29, 119,  91,  61, 121, 118, 149,  81,   0,
        111,  78, 111,  78,  91,  91,  98, 111,  90,  78,  78,  78,  91,  78,
         78, 111,  91, 111, 149,   0, 115, 115,  99, 115, 115, 115,   0,  72,
        107, 126,  72,   0,  10,  22,  23,  26,  38,  76,  77,  78,  78, 144,
        105, 124,  96,   0,  52,  45,  52,  74,  74,  74, 104, 136, 136, 136,
        136, 138, 138,  74,  52,  52,  74,  52, 104, 104, 104, 136, 104, 104,
        104,  74,  74,   0,   3,  10,  74, 108, 115, 115, 115, 115,   0,  22,
         78,  87, 145, 145, 145, 145, 145, 145, 145,  66,  78,  78,  90,  53,
         91, 123,   0,  15,  54,  78, 126, 128,  77,  22,  35,  22,   0,  78,
        111, 128,   0, 102, 112, 149,   0,  78,  95, 149,   0,  19,  32, 132,
         78,  34, 116,   0,  54,  97, 126, 129,   0,  21,  73, 134, 136, 150,
        150, 136,   0,  18,  49, 126,  97,  97,  54, 126,  18,  54,  97,  18,
         54,   0, 149,  58,  58,  60,  77,  83,  84,  77,  77,  77,  99,   0,
         38, 128, 145, 136, 106,  65,  65,   0,  43,  45,  61,  52,  82, 136,
         63,  40,  99,  99,  81, 104,  63,  40,   0,  22,  30,  58,  63, 115,
        133, 136, 136, 145, 145,   0], device='cuda:0')
TRIPLES:  tensor([[ 10,  40,   3],
        [ 10,  31,   3],
        [  6,  31,   0],
        ...,
        [408,   0, 411],
        [409,   0, 411],
        [410,   0, 411]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
         3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,
         4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,
         6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
         6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,
         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13,
        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14,
        14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
        16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
        21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 25, 25,
        25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
        29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
        30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31],
       device='cuda:0')
BOXES:  tensor([[0.6100, 0.8500, 0.6980, 0.9740],
        [0.1480, 0.6440, 0.2820, 0.7680],
        [0.2560, 0.6120, 0.4880, 1.1000],
        ...,
        [0.0560, 0.9493, 0.1140, 1.0427],
        [0.1940, 0.9467, 0.2380, 1.0453],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([ 21, 136, 149,  67,  60, 148,  91,   0,  41,  74,  78, 111, 130, 142,
         41, 130, 142,  99,  47,  99,  78, 111,  47,  22,   0,   2,  40,  61,
         84, 127, 150, 150, 150, 104,   2, 136, 136,   0,   4,   4,   4,   4,
          4,   4,   4,   4,  31,  31,  31,  91,  91, 121, 130, 137, 138, 139,
         66,  78,   4, 137,  91,  99, 134,  99,  99,  99,  36,   0,  17,  38,
         59, 116,  54,  54,  76, 129,  38,  34,   0,  32, 108, 108,  22,  32,
          0,  21,  52,  61,  73,  83, 136, 138,   0,  20,  44,  54,  61,  61,
         62,  85,  98, 111, 111,  78,  55,  79,  99,  31,  88,  58,  87,   0,
         10,  57,  60,  61,  73,  78,  99, 136, 149, 111,  59,  60,  91,   0,
         90, 114, 139, 149, 124,   0,  17,  28,  29,  54,  94,  97,  97, 111,
        126,  59,  54, 103,   4,  97, 149,  54,  17,   0,  21,  64,  73,  74,
         74,  74,  78, 111, 111, 127, 136,  79,  64,  64,  73,  91,  91,  91,
         60,  64, 104,  21,  64, 104, 136,  78,   0,  58, 107, 111, 149, 149,
         92,  92, 108,  91,  22,  45,  57, 108,  99,  99,  59, 145,  99, 108,
          0,  54,  58,  68,  68,  68,  94,  18,  99,  38,  53,  32, 115, 111,
        111,   0,  24,  39,  32, 129,  76,  59,   0,   8,  40,  82,  43,  44,
          8,   8,  61,   0,  51, 141,  13,  19,   5,  19,  19,   4,   5,   5,
          0,  29,  29,  29,  53,  62, 118, 118, 121,  91,  87,  90,  29,  60,
         29,  87,  66,  29,  91,  29,  29,   0,   3,  28,  36,  39,  72, 110,
        105,  88,   0,  63,  66,  73,  91, 136, 136,  99,  78,   0,  12,  74,
        127,  49,  73, 104,   0,  38,  59,  30,  24, 145,  77,  85,  24,  24,
         24,  24,   0,  22,  30,  30,  38,  44,  71,  99,  99,  99, 100, 114,
        145,  30, 133,  76,  76,  76, 136, 124,  22,  91, 105, 124,  22, 133,
         22, 145, 115,   0,   4,  15,  54,  57,  61,  72,  91, 110,  93,   0,
        113,  41,  58,  78, 138, 113,  78,   4,   4,  41,   4,   0,   3,  10,
        112,  53,  58,  58, 111, 112, 122, 120, 104,   0,  18, 108, 112, 112,
        131,   0,  81, 136, 103,  14,  63,  14,   0,  44, 126,  85,  58, 126,
         74,  76,   0,   4,  22,  66,  78, 145, 144, 144,  78, 114, 124,   0,
         22,  45,  99, 114, 105, 115, 145, 100,   0,  22,  22,  30, 133, 133,
         44,  58,   0], device='cuda:0')
TRIPLES:  tensor([[  0,  20,   1],
        [  0,  20,   1],
        [  0,  20,   1],
        ...,
        [405,   0, 408],
        [406,   0, 408],
        [407,   0, 408]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
         3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,
         4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,
         6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
         9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12,
        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13,
        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14,
        14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,
        16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
        26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28,
        28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30,
        30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31], device='cuda:0')
BOXES:  tensor([[0.1260, 0.2312, 0.3800, 0.6757],
        [0.4940, 0.4985, 1.4840, 1.4985],
        [0.6220, 0.4264, 0.8780, 1.1622],
        ...,
        [0.6027, 0.2180, 0.7600, 0.3340],
        [0.5893, 0.2020, 0.6320, 0.2560],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
OBJS:  tensor([ 12,  12,  28,  49,  97, 126, 126,  28,  17,  74,  88,  59,  17,   0,
         40,  44,  54,  57,  57,  58,  61,  78,  84, 111, 136, 149,   5,   0,
          3,  37,  58,  76,  78, 111, 145,  91,  57, 110,  48,  36,  58,   0,
         96,  73,  73,  73,  73,  96,  96,  73,  73,  73,  73,  73,   0,   4,
        124, 130, 130, 137, 145, 142,   0,  22,  78,  95, 144, 147,   0,  13,
         24,  59,  94,  54,   0,   3, 145,  57,  58,  84, 111, 149, 128, 144,
        149,  59,  58, 149,  87,   0,  52,  52,  83, 127, 127,  74,  74,  52,
          0,  13,  53, 149, 149,  57,  53, 143,  44,   0,  37,  44,  61,  74,
         74,  82,  83, 127,  74,   0,  64,  21,  61,  73, 136, 127,  40,  45,
         40,   2, 127, 136,  45,  45,   0,  96, 101, 106, 149,  54, 126, 123,
        111,  24, 145,   0,  28,  58,  61,  78,  96,  73,  13,  58, 111,  73,
        110,  90, 111, 123,  38,   0,  14,  14,  22,  22, 145, 145, 145, 145,
        145, 145, 145, 145, 145,  22,  22,  22,  22,  22,  22,  22, 136, 145,
         22, 145,  22, 145, 145, 105,  14,   0,  14,  60,  91, 108,  78,  22,
         87,   0,  40,  43,  45,  52,  52,  58,  60,  78, 136,  78,  61,  99,
         52,  63, 136, 136, 136,  61,  58,   0,  31,  91, 121, 136,  78,  91,
         91,  87,  61,  21,   0,  54,  67, 122, 149,  93,  37,  57,   0,  18,
        126,   0,  37,  38,  44,  84,  89,  89,  91,   0,  37,  43,  43,  44,
         60,  61,  82,  84,  82,   0,  22,  26,  26,  26,  99, 115, 145,  76,
        136, 114, 115,  76,   0,  45, 134, 135, 136, 146, 104, 115,   0,   8,
         27,  58,  84,  89, 127,  84, 132, 132,   0,  62,  62,  62,  64,  66,
         78,  78,  78,  90, 111, 136,  45,  91,  64,  25,  64,  64,  61, 111,
         87,  44, 136,  62,  66,   0,  25,  31,  69,  90,  90, 124, 149,  90,
         78, 100, 115,  22,   0,  72,  78,  79,  88, 126, 126, 149,   3, 108,
         28,  78,  35,  60,  28, 126,  28,   0,   5,  18, 126,  59,   0,  23,
         26,  38, 130, 146, 115, 145,  99,  22, 136,   0, 107,  46,  78,  92,
         97,  92,  99,  99,  76,   0,   3,  69,  67,  78, 111,  69, 149,  69,
         69,  22,  61, 136,  22,  29,  70,   0], device='cuda:0')
TRIPLES:  tensor([[  4,  31,   3],
        [  4,  31,   3],
        [  6,  31,   0],
        ...,
        [382,   0, 385],
        [383,   0, 385],
        [384,   0, 385]], device='cuda:0')
OBJ_TO_IMG:  tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,
         2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
         3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,
         6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
         8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,
        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11,
        11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
        16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18,
        18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24,
        24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
        25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
        26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
        30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31,
        31, 31, 31, 31, 31, 31, 31, 31], device='cuda:0')
BOXES:  tensor([[0.5400, 0.5796, 0.8300, 0.9459],
        [0.3780, 0.5796, 0.9480, 1.0931],
        [0.7760, 0.2883, 0.9800, 0.5195],
        ...,
        [0.5440, 0.5796, 0.6060, 0.7177],
        [0.2700, 0.5105, 0.3560, 0.6727],
        [0.0000, 0.0000, 1.0000, 1.0000]], device='cuda:0')
MASKS:  None
=======
Starting epoch 1
>>>>>>> 78b8ba4c8012723d7f9a27685728327cc9ac2c2e
